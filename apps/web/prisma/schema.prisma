generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
  bookmarks     Bookmark[]
  archives      Archive[]
  favorites     Favorite[]
  highlights    Highlight[]
  notes         Note[]
  tags          Tag[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Collection {
  id          String     @id @default(cuid())
  name        String
  description String?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Archive {
  id        String     @id @default(cuid())
  title     String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  id        String     @id @default(cuid())
  title     String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bookmark {
  id            String        @id @default(cuid())
  url           String
  ogImage       String?
  ogTitle       String?
  ogDescription String?
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  collection    Collection?   @relation(fields: [collectionId], references: [id])
  collectionId  String?
  archive       Archive?      @relation(fields: [archiveId], references: [id])
  archiveId     String?
  favorite      Favorite?     @relation(fields: [favoriteId], references: [id])
  favoriteId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bookmarksTags BookmarkTag[]
}

model Tag {
  id            String        @id @default(cuid())
  name          String        @unique
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bookmarksTags BookmarkTag[]
}

model BookmarkTag {
  id         String   @id @default(cuid())
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([bookmarkId, tagId])
}

model Highlight {
  id        String   @id @default(cuid())
  highlight String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  note      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
