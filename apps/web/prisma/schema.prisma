generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  username      String?      @unique
  emailVerified DateTime?
  image         String?
  accessToken   String?
  accounts      Account[]
  sessions      Session[]
  collection    Collection[]
  bookmark      Bookmark[]
  archive       Archive[]
  favorite      Favorite[]
  highlight     Highlight[]
  note          Note[]
  tag           Tag[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Collection {
  id          String     @id @default(cuid())
  title       String
  description String
  isPublic    Boolean
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  bookmark    Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Archive {
  id        String     @id @default(cuid())
  title     String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmark  Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  id        String     @id @default(cuid())
  title     String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmark  Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bookmark {
  id            String      @id @default(cuid())
  url           String
  ogImage       String?
  ogTitle       String?
  ogDescription String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  collection    Collection? @relation(fields: [collectionId], references: [id])
  collectionId  String?
  archive       Archive?    @relation(fields: [archiveId], references: [id])
  archiveId     String?
  tag           Tag?        @relation(fields: [tagId], references: [id])
  tagId         String?
  favorite      Favorite?   @relation(fields: [favoriteId], references: [id])
  favoriteId    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Highlight {
  id        String   @id @default(cuid())
  highlight String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  note      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tag       Tag?     @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bookmark  Bookmark[]
  note      Note[]
}
